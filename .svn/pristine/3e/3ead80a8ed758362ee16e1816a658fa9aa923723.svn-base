package com.schooltrix.daos;

import java.sql.SQLException;
import java.util.List;

import org.hibernate.Criteria;
import org.hibernate.HibernateException;
import org.hibernate.LockMode;
import org.hibernate.SQLQuery;
import org.hibernate.Session;
import org.hibernate.criterion.Restrictions;
import org.hibernate.type.StringType;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.context.ApplicationContext;
import org.springframework.orm.hibernate3.HibernateCallback;
import org.springframework.orm.hibernate3.support.HibernateDaoSupport;

import com.schooltrix.hibernate.UploadDocuments;
import com.schooltrix.hibernate.UploadDocuments;

public class UploadDocDAOImpl extends STHibernateDAOSupport implements UploadDocDAO{
	
	@Override
	public boolean save(UploadDocuments transientInstance) throws Exception {
		
			getHibernateTemplate().saveOrUpdate(transientInstance);
			System.out.println("in saveee");
			return true;
		
	}
	@Override
	public boolean update(UploadDocuments transientInstance) throws Exception {
		try {
			getHibernateTemplate().update(transientInstance);
			return true;
		} catch (Exception e) {
			e.printStackTrace();
			return false;
		}
	}
	@Override
	public boolean delete(UploadDocuments persistentInstance) throws Exception {
		try {
			getHibernateTemplate().delete(persistentInstance);
			return true;
		} catch (Exception re) {
			re.printStackTrace();
			return false;
		}
	}
	@Override
	public UploadDocuments findByProperty(final String filed,final String value) throws Exception {
		try {
			return (UploadDocuments) getHibernateTemplate().execute(
					new HibernateCallback() {
						public Object doInHibernate(Session session)
								throws HibernateException, SQLException{							
							Criteria isExpiredCrit = session.createCriteria(UploadDocuments.class);
							isExpiredCrit.add(Restrictions.eq(filed, value));
							List list = isExpiredCrit.list();
							if(list.size()>0)
								return list.get(0);
							else
								return null;
						}
					});
		} catch (Exception ex_) {
			ex_.printStackTrace();
			return null;
		}
		
	}
		
	
	@Override
	public List findByPropertyList(final String filed,final String value) throws Exception {
		List UploadDocumentsList=null;
		try {
			UploadDocumentsList = (List) getHibernateTemplate().execute(
					new HibernateCallback() {
						public Object doInHibernate(Session session)throws HibernateException, SQLException {
							Criteria crit = session.createCriteria(UploadDocuments.class);
							crit.add(Restrictions.eq(filed, value));
							//crit.addOrder(Order.desc("sno"));
							return crit.list();
						}
					});
		} catch (Exception ex_) {
			ex_.printStackTrace();
			return null;
		}
		return UploadDocumentsList;
	}
	
	
	
	@Override
	public UploadDocuments findById(java.lang.Long id) throws Exception {
		try {
			UploadDocuments instance = (UploadDocuments) getHibernateTemplate().get("com.schooltrix.hibernate.UploadDocuments", id);
			return instance;
		} catch (Exception re) {
			throw re;
		}
	}
	
	public List getAssignemets(final String bm_id,final String cm_id)throws Exception {

		
		List assignList=null;
		try {
			//System.out.println("in branchMasterList DAOIMPL");
			assignList = (List) getHibernateTemplate().execute(
					new HibernateCallback() {
						public Object doInHibernate(Session session)throws HibernateException, SQLException {
						
						/*	select * from upload_documents where ((to_which like '%,4,%') or
									(to_which like '4,%') or (to_which like '%,4') or (to_which like '4') );*/
							
							String qu = "select upload_date,assign_type ,subject,assg_desc,file_name  from upload_documents where ((to_which like '%,"+cm_id+",%') or	(to_which like '"+cm_id+",%') " +
									"or (to_which like '%,"+cm_id+"') or (to_which like '"+cm_id+"'))  and ((bm_id like '%,"+bm_id+",%') or	(bm_id like '"+bm_id+",%') " +
									"or (bm_id like '%,"+bm_id+"') or (bm_id like '"+bm_id+"'))  and    to_whome in ('Parents','0') and upload_type='Assignment'  order by upload_date desc";
							
							System.out.println("##"+qu);
							StringType st = new StringType();
							SQLQuery sqlqu = session.createSQLQuery(qu);	
							sqlqu.addScalar("upload_date", st);
							sqlqu.addScalar("assign_type",st );
							sqlqu.addScalar("subject", st);
							sqlqu.addScalar("assg_desc",st);
							sqlqu.addScalar("file_name", st);
							
							System.out.println("in SIZE"+sqlqu.list().size());
							return sqlqu.list();
						}
					});
		} catch (Exception ex_) {
			ex_.printStackTrace();
			return assignList;
		}
		return assignList;
	}
	
	//this is same like getAssignemets....
	public List getUtilities(final String bm_id,final String cm_id,final String uptype)throws Exception {

		
		List assignList=null;
		try {
			//System.out.println("in branchMasterList DAOIMPL");
			assignList = (List) getHibernateTemplate().execute(
					new HibernateCallback() {
						public Object doInHibernate(Session session)throws HibernateException, SQLException {
						
						/*	select * from upload_documents where ((to_which like '%,4,%') or
									(to_which like '4,%') or (to_which like '%,4') or (to_which like '4') );*/
							
							String qu = "select upload_date,upload_type ,file_name  from upload_documents where ((to_which like '%,"+cm_id+",%') or	(to_which like '"+cm_id+",%') " +
									"or (to_which like '%,"+cm_id+"') or (to_which like '"+cm_id+"'))  and ((bm_id like '%,"+bm_id+",%') or	(bm_id like '"+bm_id+",%') " +
									"or (bm_id like '%,"+bm_id+"') or (bm_id like '"+bm_id+"'))  and    to_whome in ('Parents','0') and upload_type='"+uptype+"'  order by upload_date desc limit 1";
							
							System.out.println("getUtilities#"+qu);
							StringType st = new StringType();
							SQLQuery sqlqu = session.createSQLQuery(qu);	
							sqlqu.addScalar("upload_date", st);
							sqlqu.addScalar("upload_type",st );
							sqlqu.addScalar("file_name", st);
							
							System.out.println("getUtilities SIZE"+sqlqu.list().size());
							return sqlqu.list();
						}
					});
		} catch (Exception ex_) {
			ex_.printStackTrace();
			return assignList;
		}
		return assignList;
	}
	
	
	
	@Override
	public List findAll() throws Exception {
		try {
			String queryString = "from UploadDocuments";
			return getHibernateTemplate().find(queryString);
		} catch (Exception re) {
			re.printStackTrace();
			return null;
		}
	}
}